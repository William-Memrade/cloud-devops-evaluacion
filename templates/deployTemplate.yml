# azure-release-pipelines.yml
parameters:
- name: IMAGE_NAME
  default: 'app_hola_mundo'

stages:
- stage: Deploy
  displayName: 'Primary Deploy'
  variables:
  - template: ../variables/variablesMicroservice.yml@templates
  - group: '${{ variables.ENV_VARIABLE_GROUP }}'
  jobs:
  - deployment: Deploy
    displayName: 'Deploy'
    environment: '${{ variables.ENV_VARIABLE_GROUP }}'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
                    
          - task: UniversalPackages@0
            displayName: 'DownloadReseleArtifact'
            inputs:
              command: 'download'
              downloadDirectory: '$(System.DefaultWorkingDirectory)'
              vstsFeed: 'ghernandez/snapshot'
              vstsFeedPackage: 'microservicio_evaluacion'
              vstsPackageVersion: '0.0.1'
              
          - script: |
              echo "[INFO] $(System.DefaultWorkingDirectory)"
              ls -la $(System.DefaultWorkingDirectory)
            displayName: 'Verify files'

          - script: |
              echo "[INFO] Verifying AWS CLI"
              if ! command -v aws &> /dev/null
              then
                  curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                  sudo apt-get update && sudo apt-get install -y unzip
                  unzip awscliv2.zip
                  sudo ./aws/install
              else
                  echo "AWS CLI is already installed"
              fi
              aws --version
              echo "[INFO] Verifying KUBECTL CLI"
              if ! command -v kubectl &> /dev/null
              then
                curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                chmod +x ./kubectl
                sudo mv ./kubectl /usr/local/bin/kubectl
              else
                echo "KUBECTL is already installed"
              fi
              kubectl version --client
              if ! command -v jq &> /dev/null
              then
                  sudo apt-get install -y jq
              else
                  echo "JQ is already installed"
              fi
              echo "[INFO] Verifying Docker"
              if ! command -v docker &> /dev/null
              then
                  sudo apt-get update
                  sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
                  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
                  sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
                  sudo apt-get update
                  sudo apt-get install -y docker-ce
              else
                  echo "Docker is already installed"
              fi
              docker --version
            displayName: 'Install Dependencies'

          - script: |
              echo "##vso[task.setvariable variable=AWS_ACCESS_KEY_ID]$AWS_ACCESS_KEY_ID"
              echo "##vso[task.setvariable variable=AWS_SECRET_ACCESS_KEY]$AWS_SECRET_ACCESS_KEY"
              echo "##vso[task.setvariable variable=REGION_ACCOUNT]$REGION_ACCOUNT"

              echo "[INFO] AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}"
              echo "[INFO] REGION_ACCOUNT=${REGION_ACCOUNT}"
            displayName: 'AWS Logging'

          - script: |
              echo "[INFO] Verifying the existence of the hosted zone in Route 53"
              aws route53 get-hosted-zone --id $HOSTED_ZONE_ID
            displayName: 'Verify Hosted Zone'
          
          - script: |
              echo "##vso[task.setvariable variable=ENVIRONMENT_ID]$ENVIRONMENT_ID"
              if [[ ${ENVIRONMENT_ID} == 1 ]]; then
                ENVIRONMENT_ID=desarrollo
                echo "##vso[task.setvariable variable=ENVIRONMENT_ID]$ENVIRONMENT_ID"
              fi
              NAME=$(Build.DefinitionName)
              STACK=${NAME//_/-}
              STACK_NAME=${ENVIRONMENT_ID}-${STACK}

              echo "##vso[task.setvariable variable=STACK_NAME]$STACK_NAME"
              echo "##vso[task.setvariable variable=ROLE_ARN]$ROLE_ARN"
              echo "##vso[task.setvariable variable=HOSTED_ZONE_ID]$HOSTED_ZONE_ID"
              echo "##vso[task.setvariable variable=SECURITY_GROUP_IDS]$SECURITY_GROUP_IDS"
              echo "##vso[task.setvariable variable=SUBNET_IDS]$SUBNET_IDS"
              echo "##vso[task.setvariable variable=NODEGROUP_NAME]$NODEGROUP_NAME"
              echo "##vso[task.setvariable variable=NODE_MAX_SIZE]$NODE_MAX_SIZE"
              echo "##vso[task.setvariable variable=NODE_MIN_SIZE]$NODE_MIN_SIZE"

              echo "ENVIRONMENT_ID=${ENVIRONMENT_ID}"
              echo "HOSTED_ZONE_ID=${HOSTED_ZONE_ID}"
              echo "NODE_MAX_SIZE=${NODE_MAX_SIZE}"
              echo "NODE_MIN_SIZE=${NODE_MIN_SIZE}"
              echo "NODEGROUP_NAME=${NODEGROUP_NAME}"
              echo "ROLE_ARN=${ROLE_ARN}"
              echo "SECURITY_GROUP_IDS=${SECURITY_GROUP_IDS}"
              echo "SUBNET_IDS=${SUBNET_IDS}"
              echo "STACK_NAME=${STACK_NAME}"
            displayName: 'Init variables'
          
          - script: |
              echo "[INFO] Creating ECR Repository if it doesn't exist"
              aws ecr describe-repositories --repository-names ${STACK_NAME}-ecr || aws ecr create-repository --repository-name ${STACK_NAME}-ecr
            displayName: 'Create ECR Repository'
          
          - script: |
              sudo chmod 666 /var/run/docker.sock
              echo "[INFO] Logging into ECR"
              aws ecr get-login-password --region ${REGION_ACCOUNT} | docker login --username AWS --password-stdin ${AWS_ACCOUNT}.dkr.ecr.${REGION_ACCOUNT}.amazonaws.com
            displayName: 'ECR Login'
          
          - script: |
              echo "[INFO] Tagging Docker Image ${{ parameters.IMAGE_NAME }}"
              docker load -i ${{ parameters.IMAGE_NAME }}.tar.gz
              docker tag ${{ parameters.IMAGE_NAME }}:latest ${AWS_ACCOUNT}.dkr.ecr.${REGION_ACCOUNT}.amazonaws.com/${STACK_NAME}-ecr:latest
            displayName: 'Tag Docker Image'
          
          - script: |
              echo "[INFO] Pushing Docker Image to ECR"
              docker push ${AWS_ACCOUNT}.dkr.ecr.${REGION_ACCOUNT}.amazonaws.com/${STACK_NAME}-ecr:latest
            displayName: 'Push Docker Image to ECR'
          
          - script: |
              set -e
              aws cloudformation deploy --template-file $(System.DefaultWorkingDirectory)/cf-template.yml --stack-name ${STACK_NAME} --capabilities CAPABILITY_NAMED_IAM --parameter-overrides StackName=${STACK_NAME} RoleArn=${ROLE_ARN} HostedZoneId=${HOSTED_ZONE_ID} SubnetIds=${SUBNET_IDS} SecurityGroupIds=${SECURITY_GROUP_IDS} --region ${REGION_ACCOUNT}
              echo "[INFO] Waiting for CloudFormation stack to be complete..."
              aws cloudformation wait stack-create-complete --stack-name ${STACK_NAME}
            displayName: 'Deploy CloudFormation Stack'
          
          - script: |
              echo "[INFO] Syncing files to S3"
              aws s3 sync $(System.DefaultWorkingDirectory) s3://${STACK_NAME}-s3bucket --region ${REGION_ACCOUNT}
            displayName: 'Sync files to S3'

            # - script: |
            #   # Desplegar la infraestructura con CloudFormation
            #   aws cloudformation deploy --template-file $(System.DefaultWorkingDirectory)/cf-template.yml --stack-name ${STACK_NAME} --capabilities CAPABILITY_NAMED_IAM --parameter-overrides StackName=${STACK_NAME} RoleArn=${ROLE_ARN} HostedZoneId=${HOSTED_ZONE_ID} SubnetIds=${SUBNET_IDS} SecurityGroupIds=${SECURITY_GROUP_IDS}  NodeGroupRoleArn=${NODE_ROLE} NodeGroupName=${NODEGROUP_NAME} NodeGroupMinSize=${NODE_MIN_SIZE} NodeGroupMaxSize=${NODE_MAX_SIZE} NodeGroupDesiredSize=${NODE_MIN_SIZE}

            #   # # Desplegar la imagen Docker en EKS
            #   # kubectl apply -f deployment.yml
            # displayName: 'AWS Deploy'
          
          # - script: |
          #     cluster_status=$(aws eks describe-cluster --name ${STACK_NAME} --region ${REGION_ACCOUNT} --query "cluster.status" --output text)
          #     if [ "$cluster_status" == "ACTIVE" ]; then
          #         echo "[INFO] El cluster EKS ${STACK_NAME} está activo."
          #     else
          #         echo "[INFO] aws eks create-cluster"
          #         aws eks create-cluster \
          #             --name ${STACK_NAME} \
          #             --role-arn ${ROLE_ARN} \
          #             --resources-vpc-config subnetIds=${SUBNET_IDS},securityGroupIds=${SECURITY_GROUP_IDS} \
          #             --region ${REGION_ACCOUNT}

          #         echo "[INFO] Esperando a que el clúster esté listo..."
          #         aws eks wait cluster-active --name ${STACK_NAME} --region ${REGION_ACCOUNT}
          #     fi
          #   displayName: 'CREATE CLUSTER EKS'

          # - script: |
          #     # Obtener el ARN del clúster EKS creado por CloudFormation
          #     EKS_CLUSTER_ARN=$(aws cloudformation describe-stacks --stack-name ${STACK_NAME} --query "Stacks[0].Outputs[?OutputKey=='EKSClusterArn'].OutputValue" --output text)

          #     # Actualizar la configuración de Kubectl
          #     aws eks update-kubeconfig --name ${STACK_NAME} --region ${REGION_ACCOUNT}

          #     # Verificar si el NodeGroup existe
          #     nodegroup_status=$(aws eks describe-nodegroup --cluster-name ${STACK_NAME} --nodegroup-name ${NODEGROUP_NAME} --region ${REGION_ACCOUNT} --query "nodegroup.status" --output text || echo "NOT_FOUND")

          #     if [ "$nodegroup_status" == "NOT_FOUND" ]; then
          #         echo "[INFO] El NodeGroup ${NODEGROUP_NAME} no existe. Creando NodeGroup..."
          #         aws eks create-nodegroup \
          #             --cluster-name ${STACK_NAME} \
          #             --nodegroup-name ${NODEGROUP_NAME} \
          #             --scaling-config minSize=${NODE_MIN_SIZE},maxSize=${NODE_MAX_SIZE},desiredSize=${NODE_MIN_SIZE} \
          #             --node-role ${ROLE_ARN} \
          #             --subnets ${SUBNET_IDS} \
          #             --region ${REGION_ACCOUNT}

          #         echo "[INFO] Esperando a que el NodeGroup esté listo..."
          #         aws eks wait nodegroup-active --cluster-name ${STACK_NAME} --nodegroup-name ${NODEGROUP_NAME} --region ${REGION_ACCOUNT}
          #     else
          #         echo "[INFO] El NodeGroup ${NODEGROUP_NAME} ya existe. Actualizando configuración..."
          #         aws eks update-nodegroup-config \
          #             --cluster-name ${STACK_NAME} \
          #             --nodegroup-name ${NODEGROUP_NAME} \
          #             --scaling-config minSize=${NODE_MIN_SIZE},maxSize=${NODE_MAX_SIZE},desiredSize=${NODE_MIN_SIZE} \
          #             --region ${REGION_ACCOUNT}
          #     fi
          #   displayName: 'UPDATE CLUSTER EKS'
