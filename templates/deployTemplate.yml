# azure-release-pipelines.yml
parameters:
- name: AWS_ACCESS_KEY_ID
  default: ''
- name: AWS_SECRET_ACCESS_KEY
  default: ''
- name: REGION_ACCOUNT
  default: 'us-east-1'
- name: CLUSTER_NAME
  default: 'CLUSTER_NAME'
- name: IMAGE_NAME
  default: 'app_hola_mundo'

stages:
- stage: Deploy
  displayName: 'Primary Deploy'
  variables:
  - template: ../variables/variablesMicroservice.yml@templates
  - name: ENV_VARIABLE_GROUP
    value: ${{ variables.ENV_VARIABLE_GROUP }}
  jobs:
  - deployment: Deploy
    displayName: 'Deploy'
    environment: ${{ variables.ENV_VARIABLE_GROUP }}
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: UniversalPackages@0
            displayName: 'DownloadReseleArtifact'
            inputs:
              command: 'download'
              downloadDirectory: '$(System.DefaultWorkingDirectory)'
              vstsFeed: 'ghernandez/snapshot'
              vstsFeedPackage: 'microservicio_evaluacion'
              vstsPackageVersion: '0.0.1'
              
          - script: |
              echo "[INFO] $(System.DefaultWorkingDirectory)"
              ls -la $(System.DefaultWorkingDirectory)
            displayName: 'Verify files'

          - script: |
              sudo apt-get update -y
              sudo apt-get install awscli -y

              aws --version
            displayName: 'Install AWS CLI'

          - script: |
              echo "##vso[task.setvariable variable=AWS_ACCESS_KEY_ID]${{ variables.AWS_ACCESS_KEY_ID }}"
              echo "##vso[task.setvariable variable=AWS_SECRET_ACCESS_KEY]${{ variables.AWS_SECRET_ACCESS_KEY }}"
              echo "##vso[task.setvariable variable=REGION_ACCOUNT]${{ variables.REGION_ACCOUNT }}"
            displayName: 'Set AWS Environment Variables'

          - script: |
              aws configure set aws_access_key_id ${{ parameters.AWS_ACCESS_KEY_ID }}
              aws configure set aws_secret_access_key ${{ parameters.AWS_SECRET_ACCESS_KEY }}
              aws configure set default.region ${{ parameters.REGION_ACCOUNT }}

              # Desplegar la infraestructura con CloudFormation
              aws cloudformation deploy --template-file $(System.DefaultWorkingDirectory)/cf-template.yml --stack-name {my-stack-name} --capabilities CAPABILITY_NAMED_IAM
              
              # # Desplegar la imagen Docker en EKS
              # aws eks update-kubeconfig --name ${{ parameters.CLUSTER_NAME }}
              # # kubectl apply -f $(Pipeline.Workspace)/docker-image/deployment.yml
              # kubectl apply -f deployment.yml
            displayName: 'Deploy Infra with CloudFormation'